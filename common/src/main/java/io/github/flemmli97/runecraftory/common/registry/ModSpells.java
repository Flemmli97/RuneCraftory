package io.github.flemmli97.runecraftory.common.registry;

import io.github.flemmli97.runecraftory.RuneCraftory;
import io.github.flemmli97.runecraftory.api.datapack.SpellProperties;
import io.github.flemmli97.runecraftory.api.enums.EnumElement;
import io.github.flemmli97.runecraftory.api.enums.EnumSkills;
import io.github.flemmli97.runecraftory.api.registry.Spell;
import io.github.flemmli97.runecraftory.common.entities.misc.EntityDarkBall;
import io.github.flemmli97.runecraftory.common.entities.misc.EntityStatusBall;
import io.github.flemmli97.runecraftory.common.lib.RunecraftoryTags;
import io.github.flemmli97.runecraftory.common.spells.AppleRain;
import io.github.flemmli97.runecraftory.common.spells.AppleShield;
import io.github.flemmli97.runecraftory.common.spells.ArrowSpell;
import io.github.flemmli97.runecraftory.common.spells.BaseStaffSpell;
import io.github.flemmli97.runecraftory.common.spells.BigLeafSpell;
import io.github.flemmli97.runecraftory.common.spells.BigLightningBoltSpell;
import io.github.flemmli97.runecraftory.common.spells.BigPlateSpell;
import io.github.flemmli97.runecraftory.common.spells.BlazeFireballsSpell;
import io.github.flemmli97.runecraftory.common.spells.BlitzSpell;
import io.github.flemmli97.runecraftory.common.spells.BoneNeedleSpell;
import io.github.flemmli97.runecraftory.common.spells.ButterflySpell;
import io.github.flemmli97.runecraftory.common.spells.CardThrowSpell;
import io.github.flemmli97.runecraftory.common.spells.DarkBallSpell;
import io.github.flemmli97.runecraftory.common.spells.DarkBeamSpell;
import io.github.flemmli97.runecraftory.common.spells.DarkBulletsSpell;
import io.github.flemmli97.runecraftory.common.spells.DarknessSpell;
import io.github.flemmli97.runecraftory.common.spells.DoubleBulletSpell;
import io.github.flemmli97.runecraftory.common.spells.DoubleWaterLaserSpell;
import io.github.flemmli97.runecraftory.common.spells.EarthSpikeSpell;
import io.github.flemmli97.runecraftory.common.spells.ElementBallBarrageSpell;
import io.github.flemmli97.runecraftory.common.spells.ElementalCircleSpell;
import io.github.flemmli97.runecraftory.common.spells.ElementalSpell;
import io.github.flemmli97.runecraftory.common.spells.EmptySpell;
import io.github.flemmli97.runecraftory.common.spells.EnergyOrbSpell;
import io.github.flemmli97.runecraftory.common.spells.EvokerFangSpell;
import io.github.flemmli97.runecraftory.common.spells.ExpandingLight;
import io.github.flemmli97.runecraftory.common.spells.ExplosionSpell;
import io.github.flemmli97.runecraftory.common.spells.FireWallSpell;
import io.github.flemmli97.runecraftory.common.spells.FireballSpell;
import io.github.flemmli97.runecraftory.common.spells.FurnitureThrowSpell;
import io.github.flemmli97.runecraftory.common.spells.GroundedAbilitySpell;
import io.github.flemmli97.runecraftory.common.spells.GustRockSpell;
import io.github.flemmli97.runecraftory.common.spells.GustSpell;
import io.github.flemmli97.runecraftory.common.spells.HealT1Spell;
import io.github.flemmli97.runecraftory.common.spells.HealT2Spell;
import io.github.flemmli97.runecraftory.common.spells.HealT3Spell;
import io.github.flemmli97.runecraftory.common.spells.IceBallDropSpell;
import io.github.flemmli97.runecraftory.common.spells.IceTrailSpell;
import io.github.flemmli97.runecraftory.common.spells.Laser3Spell;
import io.github.flemmli97.runecraftory.common.spells.Laser5Spell;
import io.github.flemmli97.runecraftory.common.spells.LaserAOESpell;
import io.github.flemmli97.runecraftory.common.spells.LightBarrierSpell;
import io.github.flemmli97.runecraftory.common.spells.LightBeamSpell;
import io.github.flemmli97.runecraftory.common.spells.MissileSpell;
import io.github.flemmli97.runecraftory.common.spells.MultiArrowSpell;
import io.github.flemmli97.runecraftory.common.spells.MultiFireballSpell;
import io.github.flemmli97.runecraftory.common.spells.ParaHealSpell;
import io.github.flemmli97.runecraftory.common.spells.PenetrateWindBladeSpell;
import io.github.flemmli97.runecraftory.common.spells.PlushThrowSpell;
import io.github.flemmli97.runecraftory.common.spells.PoisonHealSpell;
import io.github.flemmli97.runecraftory.common.spells.PoisonNeedleSpell;
import io.github.flemmli97.runecraftory.common.spells.PollenPuffSpell;
import io.github.flemmli97.runecraftory.common.spells.PowerWaveSpell;
import io.github.flemmli97.runecraftory.common.spells.PrismSpell;
import io.github.flemmli97.runecraftory.common.spells.RafflesiaBreathSpell;
import io.github.flemmli97.runecraftory.common.spells.RafflesiaCircleSpell;
import io.github.flemmli97.runecraftory.common.spells.RockSpearSpell;
import io.github.flemmli97.runecraftory.common.spells.RootSpike;
import io.github.flemmli97.runecraftory.common.spells.RootSpikeTriple;
import io.github.flemmli97.runecraftory.common.spells.ShineSpell;
import io.github.flemmli97.runecraftory.common.spells.ShulkerBulletSpell;
import io.github.flemmli97.runecraftory.common.spells.SimpleVanillaProjectileSpell;
import io.github.flemmli97.runecraftory.common.spells.SlashSpell;
import io.github.flemmli97.runecraftory.common.spells.SleepAuraSpell;
import io.github.flemmli97.runecraftory.common.spells.SleepBallSpell;
import io.github.flemmli97.runecraftory.common.spells.SmallLeafSpell;
import io.github.flemmli97.runecraftory.common.spells.SporeCircleSpell;
import io.github.flemmli97.runecraftory.common.spells.StarFallSpell;
import io.github.flemmli97.runecraftory.common.spells.StatusBallSpell;
import io.github.flemmli97.runecraftory.common.spells.StoneThrowSpell;
import io.github.flemmli97.runecraftory.common.spells.TeleportSpell;
import io.github.flemmli97.runecraftory.common.spells.ThrowHandItemSpell;
import io.github.flemmli97.runecraftory.common.spells.TornadoSpell;
import io.github.flemmli97.runecraftory.common.spells.TripleFireBulletSpell;
import io.github.flemmli97.runecraftory.common.spells.TripleWaterLaserSpell;
import io.github.flemmli97.runecraftory.common.spells.UnsealSpell;
import io.github.flemmli97.runecraftory.common.spells.WaterLaserSpell;
import io.github.flemmli97.runecraftory.common.spells.WaterLaserSwipe;
import io.github.flemmli97.runecraftory.common.spells.WaveSpell;
import io.github.flemmli97.runecraftory.common.spells.WeaponSpell;
import io.github.flemmli97.runecraftory.common.spells.WebShotSpell;
import io.github.flemmli97.runecraftory.common.spells.WindBladeBarrageSpell;
import io.github.flemmli97.runecraftory.common.spells.WindBladeCircle;
import io.github.flemmli97.runecraftory.common.spells.WindBladeSpell;
import io.github.flemmli97.runecraftory.platform.LazyGetter;
import io.github.flemmli97.runecraftory.platform.Platform;
import io.github.flemmli97.tenshilib.platform.PlatformUtils;
import io.github.flemmli97.tenshilib.platform.registry.PlatformRegistry;
import io.github.flemmli97.tenshilib.platform.registry.RegistryEntrySupplier;
import io.github.flemmli97.tenshilib.platform.registry.SimpleRegistryWrapper;
import net.minecraft.core.Registry;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.sounds.SoundEvents;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;

public class ModSpells {

    public static final ResourceKey<? extends Registry<Spell>> SPELL_REGISTRY_KEY = ResourceKey.createRegistryKey(new ResourceLocation(RuneCraftory.MODID, "spells"));
    public static final Supplier<SimpleRegistryWrapper<Spell>> SPELL_REGISTRY = new LazyGetter<>(() -> PlatformUtils.INSTANCE.registry(SPELL_REGISTRY_KEY));

    public static final Map<RegistryEntrySupplier<Spell>, SpellProperties> DEFAULT_PROPERTIES = new HashMap<>();

    public static final PlatformRegistry<Spell> SPELLS = PlatformUtils.INSTANCE.customRegistry(Spell.class, SPELL_REGISTRY_KEY, new ResourceLocation(RuneCraftory.MODID, "empty_spell"), true, true);
    public static final RegistryEntrySupplier<Spell> EMPTY = SPELLS.register("empty_spell", EmptySpell::new);

    public static final RegistryEntrySupplier<Spell> STAFF_CAST = registerSpell("base_staff_spell", BaseStaffSpell::new, new SpellProperties.Builder(0, 0));

    // Vanilla
    public static final RegistryEntrySupplier<Spell> ARROW = registerSpell("vanilla_arrow", ArrowSpell::new, new SpellProperties.Builder(3, 4));
    public static final RegistryEntrySupplier<Spell> WITHER_SKULL = registerSpell("vanilla_wither_skull", () -> new SimpleVanillaProjectileSpell(SimpleVanillaProjectileSpell.WITHER_SKULL, SoundEvents.WITHER_SHOOT), new SpellProperties.Builder(10, 3));
    public static final RegistryEntrySupplier<Spell> EVOKER_FANG = registerSpell("vanilla_evoker_fang", EvokerFangSpell::new, new SpellProperties.Builder(10, 2));
    public static final RegistryEntrySupplier<Spell> SNOWBALL = registerSpell("vanilla_snowball", () -> new SimpleVanillaProjectileSpell(SimpleVanillaProjectileSpell.SNOWBALL, SoundEvents.SNOWBALL_THROW), new SpellProperties.Builder(0, 0));
    public static final RegistryEntrySupplier<Spell> GHAST_FIREBALL = registerSpell("vanilla_ghast_fireball", () -> new SimpleVanillaProjectileSpell(SimpleVanillaProjectileSpell.GHAST_FIREBALL, SoundEvents.GHAST_SHOOT), new SpellProperties.Builder(10, 3));
    public static final RegistryEntrySupplier<Spell> DRAGON_FIREBALL = registerSpell("vanilla_dragon_fireball", () -> new SimpleVanillaProjectileSpell(SimpleVanillaProjectileSpell.DRAGON_FIREBALL, SoundEvents.ENDER_DRAGON_SHOOT), new SpellProperties.Builder(10, 5));
    public static final RegistryEntrySupplier<Spell> SHULKER_BULLET = registerSpell("vanilla_shulker_bullet", ShulkerBulletSpell::new, new SpellProperties.Builder(10, 3));
    public static final RegistryEntrySupplier<Spell> BLAZE_FIREBALLS = registerSpell("vanilla_blaze_fireballs", BlazeFireballsSpell::new, new SpellProperties.Builder(10, 3));

    public static final RegistryEntrySupplier<Spell> FIREBALL = registerSpell("fireball", () -> new FireballSpell(false), new SpellProperties.Builder(20, 3).withXPGain(EnumSkills.FIRE, 2).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> BIG_FIREBALL = registerSpell("big_fireball", () -> new FireballSpell(true), new SpellProperties.Builder(20, 7).withXPGain(EnumSkills.FIRE, 4).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> EXPLOSION = registerSpell("explosion", ExplosionSpell::new, new SpellProperties.Builder(20, 15).withXPGain(EnumSkills.FIRE, 13).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> WATER_LASER = registerSpell("water_laser", () -> new WaterLaserSpell(9), new SpellProperties.Builder(20, 4).withXPGain(EnumSkills.WATER, 6).affectedSkill(EnumSkills.WATER));
    public static final RegistryEntrySupplier<Spell> PARALLEL_LASER = registerSpell("parallel_laser", () -> new DoubleWaterLaserSpell(9), new SpellProperties.Builder(20, 8).withXPGain(EnumSkills.WATER, 8).affectedSkill(EnumSkills.WATER));
    public static final RegistryEntrySupplier<Spell> DELTA_LASER = registerSpell("delta_laser", TripleWaterLaserSpell::new, new SpellProperties.Builder(20, 12).withXPGain(EnumSkills.WATER, 10).affectedSkill(EnumSkills.WATER));
    public static final RegistryEntrySupplier<Spell> SCREW_ROCK = registerSpell("screw_rock", () -> new RockSpearSpell(false), new SpellProperties.Builder(20, 5).withXPGain(EnumSkills.EARTH, 6).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> EARTH_SPIKE = registerSpell("earth_spike", EarthSpikeSpell::new, new SpellProperties.Builder(20, 10).withXPGain(EnumSkills.EARTH, 8).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> AVENGER_ROCK = registerSpell("avenger_rock", () -> new RockSpearSpell(true), new SpellProperties.Builder(20, 16).withXPGain(EnumSkills.EARTH, 10).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> SONIC = registerSpell("sonic", () -> new WindBladeSpell(1, 1f, 0), new SpellProperties.Builder(20, 5).withXPGain(EnumSkills.WIND, 6).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> DOUBLE_SONIC = registerSpell("double_sonic", () -> new WindBladeSpell(2, 0.95f, 40), new SpellProperties.Builder(20, 9).withXPGain(EnumSkills.WIND, 8).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> PENETRATE_SONIC = registerSpell("penetrate_sonic", PenetrateWindBladeSpell::new, new SpellProperties.Builder(20, 13).withXPGain(EnumSkills.WIND, 10).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> LIGHT_BARRIER = registerSpell("light_barrier", LightBarrierSpell::new, new SpellProperties.Builder(20, 7).withXPGain(EnumSkills.LIGHT, 6).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> SHINE = registerSpell("shine", ShineSpell::new, new SpellProperties.Builder(20, 15).withXPGain(EnumSkills.LIGHT, 8).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> PRISM = registerSpell("prism", () -> new PrismSpell(false), new SpellProperties.Builder(20, 24).withXPGain(EnumSkills.LIGHT, 10).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> DARK_SNAKE = registerSpell("dark_snake", () -> new DarkBallSpell(EntityDarkBall.Type.SNAKE), new SpellProperties.Builder(20, 4).withXPGain(EnumSkills.DARK, 6).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> DARK_BALL = registerSpell("dark_ball", () -> new DarkBallSpell(EntityDarkBall.Type.BALL), new SpellProperties.Builder(20, 8).withXPGain(EnumSkills.DARK, 8).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> DARKNESS = registerSpell("darkness", DarknessSpell::new, new SpellProperties.Builder(30, 40).withXPGain(EnumSkills.DARK, 12).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> CURE = registerSpell("cure", HealT1Spell::new, new SpellProperties.Builder(20, 0).withXPGain(EnumSkills.LOVE, 8).affectedSkill(EnumSkills.LOVE).percentageCost(0.08f));
    public static final RegistryEntrySupplier<Spell> CURE_ALL = registerSpell("cure_all", HealT2Spell::new, new SpellProperties.Builder(20, 0).withXPGain(EnumSkills.LOVE, 16).affectedSkill(EnumSkills.LOVE).percentageCost(0.13f));
    public static final RegistryEntrySupplier<Spell> MASTER_CURE = registerSpell("master_cure", HealT3Spell::new, new SpellProperties.Builder(20, 0).withXPGain(EnumSkills.LOVE, 24).affectedSkill(EnumSkills.LOVE).percentageCost(0.2f));
    public static final RegistryEntrySupplier<Spell> MEDI_POISON = registerSpell("medi_poison", PoisonHealSpell::new, new SpellProperties.Builder(20, 0).withXPGain(EnumSkills.LOVE, 10).affectedSkill(EnumSkills.LOVE).percentageCost(0.1f));
    public static final RegistryEntrySupplier<Spell> MEDI_PARA = registerSpell("medi_paralysis", ParaHealSpell::new, new SpellProperties.Builder(20, 0).withXPGain(EnumSkills.LOVE, 10).affectedSkill(EnumSkills.LOVE).percentageCost(0.15f));
    public static final RegistryEntrySupplier<Spell> MEDI_SEAL = registerSpell("medi_seal", UnsealSpell::new, new SpellProperties.Builder(20, 0).withXPGain(EnumSkills.LOVE, 10).affectedSkill(EnumSkills.LOVE).percentageCost(0.25f));

    public static final RegistryEntrySupplier<Spell> POWER_WAVE = registerSpell("power_wave", PowerWaveSpell::new, new SpellProperties.Builder(5, 7).withXPGain(EnumSkills.SHORTSWORD, 8).affectedSkill(EnumSkills.SHORTSWORD));
    public static final RegistryEntrySupplier<Spell> DASH_SLASH = registerSpell("dash_slash", () -> new WeaponSpell(ModAttackActions.DASH_SLASH, RunecraftoryTags.SHORTSWORDS), new SpellProperties.Builder(5, 12).withXPGain(EnumSkills.SHORTSWORD, 5).affectedSkill(EnumSkills.SHORTSWORD));
    public static final RegistryEntrySupplier<Spell> RUSH_ATTACK = registerSpell("rush_attack", () -> new WeaponSpell(ModAttackActions.RUSH_ATTACK, RunecraftoryTags.SHORTSWORDS), new SpellProperties.Builder(5, 5).withXPGain(EnumSkills.SHORTSWORD, 9).affectedSkill(EnumSkills.SHORTSWORD));
    public static final RegistryEntrySupplier<Spell> ROUND_BREAK = registerSpell("round_break", () -> new WeaponSpell(ModAttackActions.ROUND_BREAK, RunecraftoryTags.SHORTSWORDS), new SpellProperties.Builder(5, 25).withXPGain(EnumSkills.SHORTSWORD, 11).affectedSkill(EnumSkills.SHORTSWORD));
    public static final RegistryEntrySupplier<Spell> MIND_THRUST = registerSpell("mind_thrust", () -> new WeaponSpell(ModAttackActions.MIND_THRUST, RunecraftoryTags.SHORTSWORDS), new SpellProperties.Builder(5, 15).withXPGain(EnumSkills.SHORTSWORD, 6).affectedSkill(EnumSkills.SHORTSWORD));
    public static final RegistryEntrySupplier<Spell> BLITZ = registerSpell("blitz", BlitzSpell::new, new SpellProperties.Builder(5, 10).percentageCost(0.15f).withXPGain(EnumSkills.DUAL, 15).affectedSkill(EnumSkills.DUAL));
    public static final RegistryEntrySupplier<Spell> TWIN_ATTACK = registerSpell("twin_attack", () -> new WeaponSpell(ModAttackActions.TWIN_ATTACK, RunecraftoryTags.DUALBLADES), new SpellProperties.Builder(5, 15).withXPGain(EnumSkills.DUAL, 8).affectedSkill(EnumSkills.DUAL));
    public static final RegistryEntrySupplier<Spell> STORM = registerSpell("storm", () -> new GroundedAbilitySpell(ModAttackActions.STORM, RunecraftoryTags.DUALBLADES), new SpellProperties.Builder(5, 5).withXPGain(EnumSkills.DUAL, 6).affectedSkill(EnumSkills.DUAL));
    public static final RegistryEntrySupplier<Spell> GUST = registerSpell("gust", () -> new WeaponSpell(ModAttackActions.GUST, RunecraftoryTags.DUALBLADES), new SpellProperties.Builder(5, 20).withXPGain(EnumSkills.DUAL, 8).affectedSkill(EnumSkills.DUAL));
    public static final RegistryEntrySupplier<Spell> RAIL_STRIKE = registerSpell("rail_strike", () -> new WeaponSpell(ModAttackActions.RAIL_STRIKE, RunecraftoryTags.DUALBLADES), new SpellProperties.Builder(5, 25).withXPGain(EnumSkills.DUAL, 9).affectedSkill(EnumSkills.DUAL));
    public static final RegistryEntrySupplier<Spell> WIND_SLASH = registerSpell("wind_slash", () -> new WeaponSpell(ModAttackActions.WIND_SLASH, RunecraftoryTags.LONGSWORDS), new SpellProperties.Builder(5, 8).withXPGain(EnumSkills.LONGSWORD, 6).affectedSkill(EnumSkills.LONGSWORD));
    public static final RegistryEntrySupplier<Spell> FLASH_STRIKE = registerSpell("flash_strike", () -> new WeaponSpell(ModAttackActions.FLASH_STRIKE, RunecraftoryTags.LONGSWORDS), new SpellProperties.Builder(5, 20).withXPGain(EnumSkills.LONGSWORD, 5).affectedSkill(EnumSkills.LONGSWORD));
    public static final RegistryEntrySupplier<Spell> STEEL_HEART = registerSpell("steel_heart", () -> new WeaponSpell(ModAttackActions.STEEL_HEART, RunecraftoryTags.LONGSWORDS), new SpellProperties.Builder(5, 10).percentageCost(0.15f).withXPGain(EnumSkills.LONGSWORD, 11).affectedSkill(EnumSkills.LONGSWORD));
    public static final RegistryEntrySupplier<Spell> DELTA_STRIKE = registerSpell("delta_strike", () -> new WeaponSpell(ModAttackActions.DELTA_STRIKE, RunecraftoryTags.LONGSWORDS), new SpellProperties.Builder(5, 17).withXPGain(EnumSkills.LONGSWORD, 8).affectedSkill(EnumSkills.LONGSWORD));
    public static final RegistryEntrySupplier<Spell> NAIVE_BLADE = registerSpell("naive_blade", () -> new WeaponSpell(ModAttackActions.NAIVE_BLADE, RunecraftoryTags.LONGSWORDS), new SpellProperties.Builder(5, 13).withXPGain(EnumSkills.LONGSWORD, 15).affectedSkill(EnumSkills.LONGSWORD));
    public static final RegistryEntrySupplier<Spell> HURRICANE = registerSpell("hurricane", () -> new WeaponSpell(ModAttackActions.HURRICANE, RunecraftoryTags.SPEARS), new SpellProperties.Builder(5, 6).withXPGain(EnumSkills.SPEAR, 6).affectedSkill(EnumSkills.SPEAR));
    public static final RegistryEntrySupplier<Spell> REAPER_SLASH = registerSpell("reaper_slash", () -> new WeaponSpell(ModAttackActions.REAPER_SLASH, RunecraftoryTags.SPEARS), new SpellProperties.Builder(5, 10).withXPGain(EnumSkills.SPEAR, 7).affectedSkill(EnumSkills.SPEAR));
    public static final RegistryEntrySupplier<Spell> MILLION_STRIKE = registerSpell("million_strike", () -> new WeaponSpell(ModAttackActions.MILLION_STRIKE, RunecraftoryTags.SPEARS), new SpellProperties.Builder(5, 25).withXPGain(EnumSkills.SPEAR, 6).affectedSkill(EnumSkills.SPEAR));
    public static final RegistryEntrySupplier<Spell> AXEL_DISASTER = registerSpell("axel_disaster", () -> new WeaponSpell(ModAttackActions.AXEL_DISASTER, RunecraftoryTags.SPEARS), new SpellProperties.Builder(5, 17).withXPGain(EnumSkills.SPEAR, 5).affectedSkill(EnumSkills.SPEAR));
    public static final RegistryEntrySupplier<Spell> STARDUST_UPPER = registerSpell("stardust_upper", () -> new WeaponSpell(ModAttackActions.STARDUST_UPPER, RunecraftoryTags.HAMMER_AXES), new SpellProperties.Builder(5, 13).withXPGain(EnumSkills.HAMMERAXE, 8).affectedSkill(EnumSkills.HAMMERAXE));
    public static final RegistryEntrySupplier<Spell> GRAND_IMPACT = registerSpell("grand_impact", () -> new WeaponSpell(ModAttackActions.GRAND_IMPACT, RunecraftoryTags.HAMMER_AXES), new SpellProperties.Builder(5, 25).withXPGain(EnumSkills.HAMMERAXE, 7).affectedSkill(EnumSkills.HAMMERAXE));
    public static final RegistryEntrySupplier<Spell> TORNADO_SWING = registerSpell("tornado_swing", () -> new WeaponSpell(ModAttackActions.TORNADO_SWING, RunecraftoryTags.HAMMER_AXES), new SpellProperties.Builder(5, 13).withXPGain(EnumSkills.HAMMERAXE, 6).affectedSkill(EnumSkills.HAMMERAXE));
    public static final RegistryEntrySupplier<Spell> GIGA_SWING = registerSpell("giga_swing", () -> new WeaponSpell(ModAttackActions.GIGA_SWING, RunecraftoryTags.HAMMER_AXES), new SpellProperties.Builder(5, 16).withXPGain(EnumSkills.HAMMERAXE, 10).affectedSkill(EnumSkills.HAMMERAXE));
    public static final RegistryEntrySupplier<Spell> UPPER_CUT = registerSpell("upper_cut", () -> new WeaponSpell(ModAttackActions.UPPER_CUT, RunecraftoryTags.FISTS), new SpellProperties.Builder(5, 8).withXPGain(EnumSkills.FIST, 11).affectedSkill(EnumSkills.FIST));
    public static final RegistryEntrySupplier<Spell> DOUBLE_KICK = registerSpell("double_kick", () -> new WeaponSpell(ModAttackActions.DOUBLE_KICK, RunecraftoryTags.FISTS), new SpellProperties.Builder(5, 15).withXPGain(EnumSkills.FIST, 9).affectedSkill(EnumSkills.FIST));
    public static final RegistryEntrySupplier<Spell> STRAIGHT_PUNCH = registerSpell("straight_punch", () -> new WeaponSpell(ModAttackActions.STRAIGHT_PUNCH, RunecraftoryTags.FISTS), new SpellProperties.Builder(5, 18).withXPGain(EnumSkills.FIST, 12).affectedSkill(EnumSkills.FIST));
    public static final RegistryEntrySupplier<Spell> NEKO_DAMASHI = registerSpell("neko_damashi", () -> new WeaponSpell(ModAttackActions.NEKO_DAMASHI, RunecraftoryTags.FISTS), new SpellProperties.Builder(5, 9).withXPGain(EnumSkills.FIST, 10).affectedSkill(EnumSkills.FIST));
    public static final RegistryEntrySupplier<Spell> RUSH_PUNCH = registerSpell("rush_punch", () -> new WeaponSpell(ModAttackActions.RUSH_PUNCH, RunecraftoryTags.FISTS), new SpellProperties.Builder(5, 20).withXPGain(EnumSkills.FIST, 7).affectedSkill(EnumSkills.FIST));
    public static final RegistryEntrySupplier<Spell> CYCLONE = registerSpell("cyclone", () -> new WeaponSpell(ModAttackActions.CYCLONE, RunecraftoryTags.FISTS), new SpellProperties.Builder(5, 22).withXPGain(EnumSkills.FIST, 6).affectedSkill(EnumSkills.FIST));
    public static final RegistryEntrySupplier<Spell> RAPID_MOVE = registerSpell("rapid_move", () -> new WeaponSpell(ModAttackActions.RAPID_MOVE, RunecraftoryTags.FISTS), new SpellProperties.Builder(5, 5).withXPGain(EnumSkills.FIST, 6).affectedSkill(EnumSkills.FIST));

    public static final RegistryEntrySupplier<Spell> TELEPORT = registerSpell("teleport", TeleportSpell::new, new SpellProperties.Builder(30, 0));

    public static final RegistryEntrySupplier<Spell> QUADRUPLE_WIND_BLADE = registerSpell("quadruple_wind_blade", () -> new WindBladeSpell(4, 0.95f, 40), new SpellProperties.Builder(20, 14).withXPGain(EnumSkills.WIND, 8).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> SEXTUPLE_WIND_BLADE = registerSpell("sextuple_wind_blade", () -> new WindBladeSpell(6, 0.95f, 40), new SpellProperties.Builder(20, 25).withXPGain(EnumSkills.WIND, 10).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> DOUBLE_ARROW = registerSpell("double_arrow", () -> new MultiArrowSpell(7, 1, 10), new SpellProperties.Builder(10, 10));
    public static final RegistryEntrySupplier<Spell> TRIPLE_ARROW = registerSpell("triple_arrow", () -> new MultiArrowSpell(7, 1, 15), new SpellProperties.Builder(10, 14));
    public static final RegistryEntrySupplier<Spell> SPORE_CIRCLE_SPELL = registerSpell("spore_circle", SporeCircleSpell::new, new SpellProperties.Builder(20, 20).withXPGain(EnumSkills.EARTH, 5).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> GUST_SPELL = registerSpell("gust_wind", GustSpell::new, new SpellProperties.Builder(30, 5).withXPGain(EnumSkills.WIND, 5));
    public static final RegistryEntrySupplier<Spell> STONE_THROW = registerSpell("stone_throw", StoneThrowSpell::new, new SpellProperties.Builder(10, 15));
    public static final RegistryEntrySupplier<Spell> WEB_SHOT = registerSpell("web_shot", WebShotSpell::new, new SpellProperties.Builder(15, 15));
    public static final RegistryEntrySupplier<Spell> SPIRIT_FLAME = registerSpell("spirit_flame", () -> new ElementalSpell(EnumElement.DARK), new SpellProperties.Builder(20, 15).withXPGain(EnumSkills.DARK, 7).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> IGNIS_FLAME = registerSpell("ignis_flame", () -> new ElementalSpell(EnumElement.FIRE), new SpellProperties.Builder(20, 15).withXPGain(EnumSkills.FIRE, 7).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> POLLEN_PUFF = registerSpell("pollen_puff", PollenPuffSpell::new, new SpellProperties.Builder(50, 100).withXPGain(EnumSkills.EARTH, 8).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> SLEEP_BALLS = registerSpell("sleep_balls", SleepBallSpell::new, new SpellProperties.Builder(80, 75).withXPGain(EnumSkills.EARTH, 8).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> WAVE = registerSpell("wave", WaveSpell::new, new SpellProperties.Builder(50, 40).percentageCost(0.07f).withXPGain(EnumSkills.EARTH, 8));
    public static final RegistryEntrySupplier<Spell> BUTTERFLY = registerSpell("butterfly", ButterflySpell::new, new SpellProperties.Builder(50, 50).percentageCost(0.1f).withXPGain(EnumSkills.EARTH, 10).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> LASER3 = registerSpell("laser_3", Laser3Spell::new, new SpellProperties.Builder(50, 30).withXPGain(EnumSkills.WIND, 5).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> LASER5 = registerSpell("laser_5", Laser5Spell::new, new SpellProperties.Builder(50, 70).withXPGain(EnumSkills.WIND, 8).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> LASER_AOE = registerSpell("laser_aoe", LaserAOESpell::new, new SpellProperties.Builder(60, 60).percentageCost(0.1f).withXPGain(EnumSkills.WIND, 10).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> BIG_LIGHTNING = registerSpell("big_lightning", BigLightningBoltSpell::new, new SpellProperties.Builder(60, 80).percentageCost(0.1f).withXPGain(EnumSkills.WIND, 10).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> CARD_THROW = registerSpell("card_attack", CardThrowSpell::new, new SpellProperties.Builder(40, 50).withXPGain(EnumSkills.LIGHT, 5).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> PLUSH_THROW = registerSpell("throw_plush", PlushThrowSpell::new, new SpellProperties.Builder(50, 60).percentageCost(0.05f).withXPGain(EnumSkills.DARK, 4).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> FURNITURE = registerSpell("furniture_summon", FurnitureThrowSpell::new, new SpellProperties.Builder(50, 80).percentageCost(0.1f).withXPGain(EnumSkills.DARK, 7).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> DARK_BEAM = registerSpell("dark_beam", DarkBeamSpell::new, new SpellProperties.Builder(40, 50).withXPGain(EnumSkills.DARK, 5).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> PLATE = registerSpell("big_plate", BigPlateSpell::new, new SpellProperties.Builder(40, 100));
    public static final RegistryEntrySupplier<Spell> DARK_BULLETS = registerSpell("dark_bullets", DarkBulletsSpell::new, new SpellProperties.Builder(30, 80).withXPGain(EnumSkills.DARK, 10).affectedSkill(EnumSkills.DARK));
    public static final RegistryEntrySupplier<Spell> POISON_BALL = registerSpell("poison_ball", () -> new StatusBallSpell(EntityStatusBall.Type.MUSHROOM_POISON), new SpellProperties.Builder(40, 30).withXPGain(EnumSkills.EARTH, 7).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> POISON_NEEDLE = registerSpell("poison_needle", PoisonNeedleSpell::new, new SpellProperties.Builder(20, 30));
    public static final RegistryEntrySupplier<Spell> SLEEP_AURA = registerSpell("sleep_aura", SleepAuraSpell::new, new SpellProperties.Builder(30, 50).withXPGain(EnumSkills.EARTH, 7).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> DOUBLE_BULLET = registerSpell("double_bullet", DoubleBulletSpell::new, new SpellProperties.Builder(25, 35));
    public static final RegistryEntrySupplier<Spell> THROW_HAND_ITEM = registerSpell("throw_held_item", ThrowHandItemSpell::new, new SpellProperties.Builder(15, 20));
    public static final RegistryEntrySupplier<Spell> TRIPLE_FIRE_BULLET = registerSpell("triple_fire_bullet", TripleFireBulletSpell::new, new SpellProperties.Builder(30, 50).withXPGain(EnumSkills.FIRE, 5).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> DOUBLE_FIRE_BALL = registerSpell("double_fire_ball", () -> new MultiFireballSpell(2, 0.85f, 10), new SpellProperties.Builder(20, 30).withXPGain(EnumSkills.FIRE, 5).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> TRIPLE_FIRE_BALL = registerSpell("triple_fire_ball", () -> new MultiFireballSpell(3, 0.85f, 15), new SpellProperties.Builder(20, 50).withXPGain(EnumSkills.FIRE, 6).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> QUAD_FIRE_BALL = registerSpell("quad_fire_ball", () -> new MultiFireballSpell(4, 0.85f, 20), new SpellProperties.Builder(20, 80).percentageCost(0.05f).withXPGain(EnumSkills.FIRE, 8).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> APPLE_SHIELD = registerSpell("apple_shield", AppleShield::new, new SpellProperties.Builder(60, 70).percentageCost(0.05f).withXPGain(EnumSkills.EARTH, 7));
    public static final RegistryEntrySupplier<Spell> APPLE_RAIN = registerSpell("apple_rain", () -> new AppleRain(AppleRain.Type.NORMAL), new SpellProperties.Builder(25, 70).withXPGain(EnumSkills.EARTH, 5).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> APPLE_RAIN_BIG = registerSpell("apple_rain_big", () -> new AppleRain(AppleRain.Type.BIG), new SpellProperties.Builder(25, 90).withXPGain(EnumSkills.EARTH, 5).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> APPLE_RAIN_MORE = registerSpell("apple_rain_more", () -> new AppleRain(AppleRain.Type.LOTS), new SpellProperties.Builder(25, 120).withXPGain(EnumSkills.EARTH, 5).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> ROOT_SPIKE = registerSpell("root_spike", RootSpike::new, new SpellProperties.Builder(40, 75).withXPGain(EnumSkills.EARTH, 7).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> ROOT_SPIKE_TRIPLE = registerSpell("root_spike_triple", RootSpikeTriple::new, new SpellProperties.Builder(60, 160).withXPGain(EnumSkills.EARTH, 7).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> FIREBALL_BARRAGE = registerSpell("fireball_barrage", () -> new ElementBallBarrageSpell(EnumElement.FIRE), new SpellProperties.Builder(60, 50).percentageCost(0.05f).withXPGain(EnumSkills.FIRE, 10).affectedSkill(EnumSkills.FIRE));
    public static final RegistryEntrySupplier<Spell> BUBBLE_BEAM = registerSpell("bubble_beam", () -> new ElementBallBarrageSpell(EnumElement.WATER), new SpellProperties.Builder(60, 50).percentageCost(0.05f).withXPGain(EnumSkills.WATER, 10).affectedSkill(EnumSkills.WATER));
    public static final RegistryEntrySupplier<Spell> SLASH = registerSpell("slash", SlashSpell::new, new SpellProperties.Builder(30, 50));
    public static final RegistryEntrySupplier<Spell> BIG_LEAF_SPELL = registerSpell("big_leaf_spell_single", () -> new BigLeafSpell(false), new SpellProperties.Builder(60, 70).withXPGain(EnumSkills.EARTH, 10).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> BIG_LEAF_SPELL_DOUBLE = registerSpell("big_leaf_spell_double", () -> new BigLeafSpell(true), new SpellProperties.Builder(60, 90).percentageCost(0.05f).withXPGain(EnumSkills.EARTH, 10).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> SMALL_LEAF_SPELL_X3 = registerSpell("small_leaf_spell_x3", () -> new SmallLeafSpell(3), new SpellProperties.Builder(40, 60).withXPGain(EnumSkills.EARTH, 5).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> SMALL_LEAF_SPELL_X5 = registerSpell("small_leaf_spell_x5", () -> new SmallLeafSpell(5), new SpellProperties.Builder(50, 70).percentageCost(0.05f).withXPGain(EnumSkills.EARTH, 7).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> SMALL_LEAF_SPELL_X7 = registerSpell("small_leaf_spell_x7", () -> new SmallLeafSpell(7), new SpellProperties.Builder(60, 90).percentageCost(0.1f).withXPGain(EnumSkills.EARTH, 10).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> BONE_NEEDLES = registerSpell("bone_needles", BoneNeedleSpell::new, new SpellProperties.Builder(60, 140));
    public static final RegistryEntrySupplier<Spell> ENERGY_ORB_SPELL = registerSpell("energy_orb_spell", EnergyOrbSpell::new, new SpellProperties.Builder(80, 120).percentageCost(0.15f).withXPGain(EnumSkills.LIGHT, 10).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> RAFFLESIA_POISON = registerSpell("rafflesia_poison", () -> new RafflesiaBreathSpell(EntityStatusBall.Type.RAFFLESIA_POISON), new SpellProperties.Builder(60, 60).percentageCost(0.07f).withXPGain(EnumSkills.EARTH, 6).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> RAFFLESIA_PARA = registerSpell("rafflesia_para", () -> new RafflesiaBreathSpell(EntityStatusBall.Type.RAFFLESIA_PARALYSIS), new SpellProperties.Builder(60, 60).percentageCost(0.07f).withXPGain(EnumSkills.EARTH, 6).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> RAFFLESIA_SLEEP = registerSpell("rafflesia_sleep", () -> new RafflesiaBreathSpell(EntityStatusBall.Type.RAFFLESIA_SLEEP), new SpellProperties.Builder(60, 60).percentageCost(0.07f).withXPGain(EnumSkills.EARTH, 6).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> RAFFLESIA_CIRCLE = registerSpell("rafflesia_cicle", RafflesiaCircleSpell::new, new SpellProperties.Builder(30, 50).percentageCost(0.05f).withXPGain(EnumSkills.EARTH, 6).affectedSkill(EnumSkills.EARTH));
    public static final RegistryEntrySupplier<Spell> WIND_CIRCLE_X8 = registerSpell("wind_circle_x8", () -> new WindBladeCircle(8), new SpellProperties.Builder(30, 40).withXPGain(EnumSkills.WIND, 8).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> WIND_CIRCLE_X16 = registerSpell("wind_circle_x16", () -> new WindBladeCircle(16), new SpellProperties.Builder(30, 60).withXPGain(EnumSkills.WIND, 10).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> EXPANDING_DOUBLE_LIGHT = registerSpell("expanding_double_light", () -> new ExpandingLight(2), new SpellProperties.Builder(30, 12).withXPGain(EnumSkills.LIGHT, 6).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> EXPANDING_QUAD_LIGHT = registerSpell("expanding_quad_light", () -> new ExpandingLight(4), new SpellProperties.Builder(30, 17).withXPGain(EnumSkills.LIGHT, 7).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> EXPANDING_OCTO_LIGHT = registerSpell("expanding_octo_light", () -> new ExpandingLight(8), new SpellProperties.Builder(30, 24).withXPGain(EnumSkills.LIGHT, 9).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> PARALYSIS_BALL = registerSpell("paralysis_ball", () -> new StatusBallSpell(EntityStatusBall.Type.PARALYSIS), new SpellProperties.Builder(30, 30).withXPGain(EnumSkills.LIGHT, 7).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> WIND_BLADE_BARRAGE = registerSpell("wind_blade_barrage", WindBladeBarrageSpell::new, new SpellProperties.Builder(60, 40).percentageCost(0.05f).withXPGain(EnumSkills.WIND, 7).affectedSkill(EnumSkills.WIND));
    public static final RegistryEntrySupplier<Spell> GUST_ROCKS = registerSpell("gust_rocks", GustRockSpell::new, new SpellProperties.Builder(60, 65).percentageCost(0.07f).withXPGain(EnumSkills.EARTH, 5));
    public static final RegistryEntrySupplier<Spell> TORNADO = registerSpell("tornado", TornadoSpell::new, new SpellProperties.Builder(60, 75).percentageCost(0.1f).withXPGain(EnumSkills.WIND, 5));
    public static final RegistryEntrySupplier<Spell> WATER_SWIPE = registerSpell("water_swipe", () -> new WaterLaserSwipe(10, 25), new SpellProperties.Builder(50, 40).withXPGain(EnumSkills.WATER, 5));
    public static final RegistryEntrySupplier<Spell> WATER_SWIPE_140 = registerSpell("water_swipe_140", () -> new WaterLaserSwipe(12, 70), new SpellProperties.Builder(50, 40).withXPGain(EnumSkills.WATER, 5));
    public static final RegistryEntrySupplier<Spell> WATER_SWIPE_360 = registerSpell("water_swipe_360", () -> new WaterLaserSwipe(18, 180), new SpellProperties.Builder(50, 40).withXPGain(EnumSkills.WATER, 5));
    public static final RegistryEntrySupplier<Spell> FIRE_WALL = registerSpell("fire_wall", FireWallSpell::new, new SpellProperties.Builder(60, 80).percentageCost(0.05f).withXPGain(EnumSkills.FIRE, 5));
    public static final RegistryEntrySupplier<Spell> ICE_BALL_DROP = registerSpell("ice_ball_drop", IceBallDropSpell::new, new SpellProperties.Builder(50, 70).withXPGain(EnumSkills.WATER, 5));
    public static final RegistryEntrySupplier<Spell> ICE_TRAIL = registerSpell("ice_trail", () -> new IceTrailSpell(true), new SpellProperties.Builder(60, 75).withXPGain(EnumSkills.WATER, 5));
    public static final RegistryEntrySupplier<Spell> WATER_LASER_LONG = registerSpell("water_laser_long", () -> new WaterLaserSpell(14), new SpellProperties.Builder(20, 12).withXPGain(EnumSkills.WATER, 6).affectedSkill(EnumSkills.WATER));
    public static final RegistryEntrySupplier<Spell> PARALLEL_LASER_LONG = registerSpell("parallel_laser_long", () -> new DoubleWaterLaserSpell(14), new SpellProperties.Builder(20, 15).withXPGain(EnumSkills.WATER, 8).affectedSkill(EnumSkills.WATER));
    public static final RegistryEntrySupplier<Spell> FIRE_CIRCLE = registerSpell("fire_circle", () -> new ElementalCircleSpell(EnumElement.FIRE), new SpellProperties.Builder(60, 50).percentageCost(0.05f).withXPGain(EnumSkills.FIRE, 5));
    public static final RegistryEntrySupplier<Spell> WIND_CIRCLE = registerSpell("wind_circle", () -> new ElementalCircleSpell(EnumElement.WIND), new SpellProperties.Builder(60, 50).percentageCost(0.05f).withXPGain(EnumSkills.WIND, 5));
    public static final RegistryEntrySupplier<Spell> ICE_CIRCLE = registerSpell("ice_circle", () -> new ElementalCircleSpell(EnumElement.WATER), new SpellProperties.Builder(60, 50).percentageCost(0.05f).withXPGain(EnumSkills.WATER, 5));
    public static final RegistryEntrySupplier<Spell> EARTH_CIRCLE = registerSpell("earth_circle", () -> new ElementalCircleSpell(EnumElement.EARTH), new SpellProperties.Builder(60, 50).percentageCost(0.05f).withXPGain(EnumSkills.EARTH, 5));
    public static final RegistryEntrySupplier<Spell> PRISM_LONG = registerSpell("prism_long", () -> new PrismSpell(true), new SpellProperties.Builder(60, 80).withXPGain(EnumSkills.LIGHT, 7).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> LIGHT_BEAM = registerSpell("light_beam", LightBeamSpell::new, new SpellProperties.Builder(25, 75).withXPGain(EnumSkills.LIGHT, 5).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> MISSILE_2X = registerSpell("missile_2x", () -> new MissileSpell(2), new SpellProperties.Builder(60, 55).percentageCost(0.05f).withXPGain(EnumSkills.LIGHT, 5).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> MISSILE_8X = registerSpell("missile_8x", () -> new MissileSpell(8), new SpellProperties.Builder(60, 75).percentageCost(0.07f).withXPGain(EnumSkills.LIGHT, 5).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> STARFALL = registerSpell("starfall", () -> new StarFallSpell(false), new SpellProperties.Builder(60, 75).percentageCost(0.05f).withXPGain(EnumSkills.LIGHT, 5).affectedSkill(EnumSkills.LIGHT));
    public static final RegistryEntrySupplier<Spell> STARFALL_LONG = registerSpell("starfall_long", () -> new StarFallSpell(true), new SpellProperties.Builder(60, 80).percentageCost(0.1f).withXPGain(EnumSkills.LIGHT, 8).affectedSkill(EnumSkills.LIGHT));

    private static RegistryEntrySupplier<Spell> registerSpell(String name, Supplier<Spell> sup, SpellProperties.Builder properties) {
        RegistryEntrySupplier<Spell> entry = SPELLS.register(name, sup);
        if (Platform.INSTANCE.isDatagen())
            DEFAULT_PROPERTIES.put(entry, properties.build());
        return entry;
    }
}
